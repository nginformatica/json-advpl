{
  "name": "JSON AdvPL",
  "tagline": "JSON parser written in and for TOTVS AdvPL",
  "body": "## AdvPL JSON Parser\r\n\r\nCopyright (C) 2016 NG Informática - TOTVS Software Partner\r\n\r\n<div align=\"center\" style=\"width: 100%\">\r\n   <div>\r\n      <img src=\"https://s3.amazonaws.com/media-p.slid.es/uploads/kouceylahadji-1/images/174949/json_logo-555px__1_.png\" />\r\n   </div>\r\n   <img src=\"https://img.shields.io/badge/language-advpl-green.svg\" />\r\n</div>\r\n\r\n### Instalação\r\nCompile o arquivo `src/JSON.prw` no repositório e adicione o arquivo `includes/json.ch` à pasta de *includes*.\r\n\r\n### Inclusão de arquivos\r\n```xbase\r\n#include 'json.ch'\r\n```\r\n\r\n### Interfaces\r\n```xbase\r\nClass JSON\r\n   Method New( xData ) Constructor\r\n   Method Parse()\r\n   Method Stringify()\r\n   Method Minify()\r\n   Method File()\r\nEndClass\r\n```\r\n\r\n### Casos de uso\r\n\r\nA maneira mais simples de utilizar é usando a função `U_ParseJSON`. Ela recebe\r\no JSON atual como string e uma referência para o objeto que será a saída.\r\nRetorna `.T.` quando o JSON é analisado com sucesso e `.F.` quando há um erro\r\nsintático, também atribuindo o erro à referência à variável passada.\r\n\r\n#### Parsear JSON simples\r\n```xbase\r\nLocal cJSON := '{\"n\": 1}'\r\nLocal oJSON\r\n\r\nIf U_ParseJSON( cJSON, @oJSON )\r\n  ConOut( oJSON[#'n'] ) // 1\r\nElse\r\n  ConOut( oJSON ) // Erro como string, se houver\r\nEndIf\r\n```\r\n\r\n#### Minificar um JSON existente\r\n```xbase\r\nLocal cJSON     := '{  \"some\":   true, [ \"big\", 1 ] }'\r\nLocal cMinified := JSON():New( cJSON ):Minify()\r\n// '{\"some\":true,[\"big\",1]}'\r\n```\r\n\r\n#### Parsear uma string JSON\r\n```xbase\r\nLocal oParser := JSON():New( '{ \"data\": [ { \"name\": \"John\", \"age\": 19 } ] }' )\r\noParser := oParser:Parse()\r\n\r\nIf oParser:IsJSON()\r\n   // \"John\"\r\n   oParser:Object()[#'data'][ 1 ][#'name']\r\n   // 19\r\n   oParser:Object()[#'data'][ 1 ][#'age']\r\nElse\r\n   // Em caso de erro\r\n   ConOut( oParser:Error() )\r\nEndIf\r\n```\r\n\r\nVocê também pode acessar objetos via `:Get('name')` ao invés de `[#'name']` e definir com `:Set('name', 'Marcelo')` ao invés de `[#'name'] := 'Marcelo'`.\r\n\r\n#### Analisar arquivo JSON\r\n```json\r\n{\r\n  \"key\":\"all\",\r\n  \"description\":\"Todas as permissões\",\r\n  \"children\":[\r\n    {\r\n      \"key\":\"create_order\",\r\n      \"description\":\"Incluir O.S.\",\r\n      \"children\":[\r\n        {\r\n          \"key\":\"create_order_corr\",\r\n          \"description\":\"Corretiva\"\r\n        },\r\n        {\r\n          \"key\":\"create_order_prev\",\r\n          \"description\":\"Preventiva\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n```xbase\r\nLocal oParser := JSON():New( './main.json' )\r\noParser := oParser:File():Parse()\r\n// \"Corretiva\"\r\noParser:Object()[#'children'][ 1 ][#'children'][ 1 ][#'description']\r\n```\r\n\r\n#### Transformar um objeto em uma string\r\n\r\nA biblioteca provê um objeto para conversão. Use a class `JSON` para isso.\r\n```xbase\r\nLocal oJSON := JSONObject():New()\r\nLocal oResult\r\n\r\noJSON[#'data'] := { }\r\noJSON[#'sub' ] := 12.4\r\n\r\naAdd( oJSON[#'data'], JSONObject():New() )\r\n\r\noJSON[#'data'][ 1 ][#'name'] := 'Marcelo'\r\noJSON[#'data'][ 1 ][#'age']  := 19\r\n// {\"data\":[{\"name\":\"Marcelo\",\"age\":19}],\"sub\":12.4}\r\n\r\noResult := JSON():New( oJSON )\r\nReturn oResult:Stringify()\r\n```\r\n\r\n#### Ler e escrever dados por JSON\r\n```xbase\r\nFunction JSONFromST1\r\n  Local aResults := { }\r\n  Local oObj\r\n\r\n  dbSelectArea( 'ST1' )\r\n  dbGoTop()\r\n\r\n  While !Eof()\r\n    oObj := JSONObject():New()\r\n    oObj[#'codigo'] := ST1->T1_CODFUNC\r\n    oObj[#'nome']   := ST1->T1_NOME\r\n    aAdd( aResults, oObj )\r\n    dbSkip()\r\n  End\r\n\r\n  dbCloseArea()\r\n\r\n  Return JSON():New( aResults ):Stringify()\r\n\r\nFunction JSONToST1( cJSON )\r\n  Local oParser := JSON():New( cJSON )\r\n  Local oJSON\r\n\r\n  oParser := oParser:Parse()\r\n\r\n  If oParser:IsJSON()\r\n    aJSON := oParser:Object()\r\n\r\n    dbSelectArea( 'ST1' )\r\n    For nI := 1 To Len( aJSON )\r\n      RecLock( 'ST1', .T. )\r\n      ST1->T1_CODIGO := aJSON[ nI ][#'codigo']\r\n      ST1->T1_NOME   := aJSON[ nI ][#'nome']\r\n      MsUnlock()\r\n    Next nI\r\n    dbCloseArea()\r\n\r\n  Else\r\n    Return .F.\r\n  EndIf\r\n\r\n  Return .T.\r\n\r\nFunction WriteMetaData\r\n  Return JSONToST1( '[{\"nome\":\"Richard\", \"codigo\": \"01\"},{\"nome\":\"John\",\"codigo\":\"02\"}]' )\r\n```\r\n\r\n## Mantenedores\r\n\r\nEsse projeto é mantido e desenvolvido pela [NG Informática](http://ngi.com.br) ─ TOTVS Software Partner\r\n\r\n<div align=\"center\" style=\"width: 100%; height: 100px; vertical-align:middle;\">\r\n   <div>\r\n      <img src=\"https://avatars1.githubusercontent.com/u/21263692?v=3&s=200\" />\r\n   </div>\r\n   <div>\r\n      <img src=\"http://www.escriba.com.br/wp-content/uploads/2014/10/totvs.png\" width=\"100\" />\r\n   </div>\r\n</div>\r\n\r\n## Log de alterações\r\n\r\nElaborado por Marcelo Camargo em 09/06/2016\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}